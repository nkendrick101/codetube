START TRANSACTION;
SET standard_conforming_strings=off;
SET escape_string_warning=off;
SET CONSTRAINTS ALL DEFERRED;

DROP TABLE IF EXISTS "cards";
CREATE TABLE "cards" (
    "id" integer  NOT NULL,
    "user_id" integer  NOT NULL,
    "token" varchar(382) NOT NULL,
    "created_at" timestamp NULL DEFAULT NULL,
    "updated_at" timestamp NULL DEFAULT NULL,
    PRIMARY KEY ("id")
);

CREATE TYPE channels_visibility AS ENUM ('public','private'); 
DROP TABLE IF EXISTS "channels";
CREATE TABLE "channels" (
    "id" integer  NOT NULL,
    "user_id" integer  NOT NULL,
    "name" varchar(382) NOT NULL,
    "slug" varchar(382) NOT NULL,
    "visibility" channels_visibility NOT NULL DEFAULT 'public',
    "description" text ,
    "image" varchar(382) NOT NULL DEFAULT 'https://storage.googleapis.com/images_codetube/15be05cedc24d1.png',
    "created_at" timestamp NULL DEFAULT NULL,
    "updated_at" timestamp NULL DEFAULT NULL,
    PRIMARY KEY ("id")
);

DROP TABLE IF EXISTS "comments";
CREATE TABLE "comments" (
    "id" integer  NOT NULL,
    "user_id" integer  NOT NULL,
    "reply_id" integer  DEFAULT NULL,
    "commentable_id" integer NOT NULL,
    "commentable_type" varchar(382) NOT NULL,
    "body" text NOT NULL,
    "deleted_at" timestamp NULL DEFAULT NULL,
    "created_at" timestamp NULL DEFAULT NULL,
    "updated_at" timestamp NULL DEFAULT NULL,
    PRIMARY KEY ("id")
);

DROP TABLE IF EXISTS "failed_jobs";
CREATE TABLE "failed_jobs" (
    "id" bigint  NOT NULL,
    "connection" text NOT NULL,
    "queue" text NOT NULL,
    "payload" text NOT NULL,
    "exception" text NOT NULL,
    "failed_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY ("id")
);

DROP TABLE IF EXISTS "jobs";
CREATE TABLE "jobs" (
    "id" bigint  NOT NULL,
    "queue" varchar(382) NOT NULL,
    "payload" text NOT NULL,
    "attempts" smallint NOT NULL,
    "reserved_at" integer  DEFAULT NULL,
    "available_at" integer  NOT NULL,
    "created_at" integer  NOT NULL,
    PRIMARY KEY ("id")
);

DROP TABLE IF EXISTS "migrations";
CREATE TABLE "migrations" (
    "id" integer  NOT NULL,
    "migration" varchar(382) NOT NULL,
    "batch" integer NOT NULL,
    PRIMARY KEY ("id")
);

INSERT INTO "migrations" VALUES (1,'2014_10_12_000000_create_users_table',1),(2,'2014_10_12_100000_create_password_resets_table',1),(3,'2017_12_31_062321_create_user_activations_table',1),(4,'2018_07_01_172653_create_channels_table',1),(5,'2018_07_01_172758_create_videos_table',1),(6,'2018_07_01_172903_create_video_views_table',1),(7,'2018_07_01_172942_create_votes_table',1),(8,'2018_07_01_173010_create_comments_table',1),(9,'2018_07_01_173038_create_subscriptions_table',1),(10,'2018_07_01_212002_create_jobs_table',1),(11,'2018_07_03_110658_create_cards_table',1),(12,'2018_07_04_050736_create_failed_jobs_table',1),(13,'2018_07_06_112710_create_plans_table',1),(14,'2018_07_07_091224_create_settings_table',1),(15,'2018_07_09_154928_create_plan_subscriptions_table',1),(16,'2018_07_10_001149_add_billable_columns_to_users_table',1);
DROP TABLE IF EXISTS "password_resets";
CREATE TABLE "password_resets" (
    "email" varchar(382) NOT NULL,
    "token" varchar(382) NOT NULL,
    "created_at" timestamp NULL DEFAULT NULL
);

DROP TABLE IF EXISTS "plan_subscriptions";
CREATE TABLE "plan_subscriptions" (
    "id" integer  NOT NULL,
    "user_id" integer  NOT NULL,
    "name" varchar(382) NOT NULL,
    "braintree_id" varchar(382) NOT NULL,
    "braintree_plan" varchar(382) NOT NULL,
    "quantity" integer NOT NULL,
    "trial_ends_at" timestamp NULL DEFAULT NULL,
    "ends_at" timestamp NULL DEFAULT NULL,
    "created_at" timestamp NULL DEFAULT NULL,
    "updated_at" timestamp NULL DEFAULT NULL,
    PRIMARY KEY ("id")
);

DROP TABLE IF EXISTS "plans";
CREATE TABLE "plans" (
    "id" integer  NOT NULL,
    "name" varchar(382) NOT NULL,
    "slug" varchar(382) NOT NULL,
    "braintree_plan" varchar(382) NOT NULL,
    "cost" numeric NOT NULL,
    "description" text ,
    "created_at" timestamp NULL DEFAULT NULL,
    "updated_at" timestamp NULL DEFAULT NULL,
    PRIMARY KEY ("id")
);

INSERT INTO "plans" VALUES (1,'Premium Monthly Plan','premium-monthly-plan','premium-monthly',9.99,'Allows access to monthly premium videos adding several features to the basic CodeTube experience.','2018-11-09 06:31:05','2018-11-09 06:31:05'),(2,'Premium Yearly Plan','premium-yearly-plan','premium-yearly',69.99,'Allows yearly access to premium features including prominent services like CodeTube ad-free.','2018-11-09 06:31:05','2018-11-09 06:31:05');
DROP TABLE IF EXISTS "settings";
CREATE TABLE "settings" (
    "id" integer  NOT NULL,
    "user_id" integer  NOT NULL,
    "content_notification" int4 NOT NULL DEFAULT '1',
    "password_notification" int4 NOT NULL DEFAULT '1',
    "reply_notification" int4 NOT NULL DEFAULT '1',
    "profile_visibility" int4 NOT NULL DEFAULT '1',
    "email_notification" int4 NOT NULL DEFAULT '1',
    "created_at" timestamp NULL DEFAULT NULL,
    "updated_at" timestamp NULL DEFAULT NULL,
    PRIMARY KEY ("id")
);

DROP TABLE IF EXISTS "subscriptions";
CREATE TABLE "subscriptions" (
    "id" integer  NOT NULL,
    "user_id" integer  NOT NULL,
    "channel_id" integer  NOT NULL,
    "created_at" timestamp NULL DEFAULT NULL,
    "updated_at" timestamp NULL DEFAULT NULL,
    PRIMARY KEY ("id")
);

DROP TABLE IF EXISTS "user_activations";
CREATE TABLE "user_activations" (
    "user_id" integer  NOT NULL,
    "token" varchar(382) NOT NULL,
    "created_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS "users";
CREATE TABLE "users" (
    "id" integer  NOT NULL,
    "name" varchar(382) NOT NULL,
    "email" varchar(382) NOT NULL,
    "password" varchar(382) DEFAULT NULL,
    "braintree_customer_id" varchar(382) DEFAULT NULL,
    "facebook_id" varchar(382) DEFAULT NULL,
    "google_id" varchar(382) DEFAULT NULL,
    "twitter_id" varchar(382) DEFAULT NULL,
    "remember_token" varchar(200) DEFAULT NULL,
    "created_at" timestamp NULL DEFAULT NULL,
    "updated_at" timestamp NULL DEFAULT NULL,
    "activated" int4 NOT NULL DEFAULT '0',
    PRIMARY KEY ("id")
);

DROP TABLE IF EXISTS "video_views";
CREATE TABLE "video_views" (
    "id" integer  NOT NULL,
    "user_id" integer  DEFAULT NULL,
    "video_id" integer  NOT NULL,
    "ip" varchar(382) DEFAULT NULL,
    "created_at" timestamp NULL DEFAULT NULL,
    "updated_at" timestamp NULL DEFAULT NULL,
    PRIMARY KEY ("id")
);

CREATE TYPE videos_visibility AS ENUM ('public','unlisted','private'); 
DROP TABLE IF EXISTS "videos";
CREATE TABLE "videos" (
    "id" integer  NOT NULL,
    "channel_id" integer  NOT NULL,
    "uuid" varchar(382) NOT NULL,
    "title" varchar(382) NOT NULL,
    "description" text ,
    "processed" int4 NOT NULL DEFAULT '0',
    "video_id" varchar(382) DEFAULT NULL,
    "video_filename" varchar(382) DEFAULT NULL,
    "visibility" videos_visibility NOT NULL,
    "allow_votes" int4 NOT NULL DEFAULT '0',
    "allow_comments" int4 NOT NULL DEFAULT '0',
    "processed_percentage" integer DEFAULT NULL,
    "deleted_at" timestamp NULL DEFAULT NULL,
    "created_at" timestamp NULL DEFAULT NULL,
    "updated_at" timestamp NULL DEFAULT NULL,
    PRIMARY KEY ("id")
);

CREATE TYPE votes_type AS ENUM ('up','down'); 
DROP TABLE IF EXISTS "votes";
CREATE TABLE "votes" (
    "id" integer  NOT NULL,
    "user_id" integer  NOT NULL,
    "voteable_id" integer NOT NULL,
    "voteable_type" varchar(382) NOT NULL,
    "type" votes_type NOT NULL,
    "created_at" timestamp NULL DEFAULT NULL,
    "updated_at" timestamp NULL DEFAULT NULL,
    PRIMARY KEY ("id")
);


-- Post-data save --
COMMIT;
START TRANSACTION;

-- Typecasts --
ALTER TABLE "settings" ALTER COLUMN "content_notification" DROP DEFAULT;
ALTER TABLE "settings" ALTER COLUMN "content_notification" TYPE boolean USING CAST("content_notification" as boolean);
ALTER TABLE "settings" ALTER COLUMN "content_notification" SET DEFAULT TRUE;
ALTER TABLE "settings" ALTER COLUMN "password_notification" DROP DEFAULT;
ALTER TABLE "settings" ALTER COLUMN "password_notification" TYPE boolean USING CAST("password_notification" as boolean);
ALTER TABLE "settings" ALTER COLUMN "password_notification" SET DEFAULT TRUE;
ALTER TABLE "settings" ALTER COLUMN "reply_notification" DROP DEFAULT;
ALTER TABLE "settings" ALTER COLUMN "reply_notification" TYPE boolean USING CAST("reply_notification" as boolean);
ALTER TABLE "settings" ALTER COLUMN "reply_notification" SET DEFAULT TRUE;
ALTER TABLE "settings" ALTER COLUMN "profile_visibility" DROP DEFAULT;
ALTER TABLE "settings" ALTER COLUMN "profile_visibility" TYPE boolean USING CAST("profile_visibility" as boolean);
ALTER TABLE "settings" ALTER COLUMN "profile_visibility" SET DEFAULT TRUE;
ALTER TABLE "settings" ALTER COLUMN "email_notification" DROP DEFAULT;
ALTER TABLE "settings" ALTER COLUMN "email_notification" TYPE boolean USING CAST("email_notification" as boolean);
ALTER TABLE "settings" ALTER COLUMN "email_notification" SET DEFAULT TRUE;
ALTER TABLE "users" ALTER COLUMN "activated" DROP DEFAULT;
ALTER TABLE "users" ALTER COLUMN "activated" TYPE boolean USING CAST("activated" as boolean);
ALTER TABLE "users" ALTER COLUMN "activated" SET DEFAULT FALSE;
ALTER TABLE "videos" ALTER COLUMN "processed" DROP DEFAULT;
ALTER TABLE "videos" ALTER COLUMN "processed" TYPE boolean USING CAST("processed" as boolean);
ALTER TABLE "videos" ALTER COLUMN "processed" SET DEFAULT FALSE;
ALTER TABLE "videos" ALTER COLUMN "allow_votes" DROP DEFAULT;
ALTER TABLE "videos" ALTER COLUMN "allow_votes" TYPE boolean USING CAST("allow_votes" as boolean);
ALTER TABLE "videos" ALTER COLUMN "allow_votes" SET DEFAULT FALSE;
ALTER TABLE "videos" ALTER COLUMN "allow_comments" DROP DEFAULT;
ALTER TABLE "videos" ALTER COLUMN "allow_comments" TYPE boolean USING CAST("allow_comments" as boolean);
ALTER TABLE "videos" ALTER COLUMN "allow_comments" SET DEFAULT FALSE;

-- Foreign keys --
ALTER TABLE "cards" ADD CONSTRAINT "cards_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX ON "cards" ("user_id");
ALTER TABLE "channels" ADD CONSTRAINT "channels_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX ON "channels" ("user_id");
ALTER TABLE "comments" ADD CONSTRAINT "comments_reply_id_foreign" FOREIGN KEY ("reply_id") REFERENCES "comments" ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX ON "comments" ("reply_id");
ALTER TABLE "comments" ADD CONSTRAINT "comments_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX ON "comments" ("user_id");
ALTER TABLE "plan_subscriptions" ADD CONSTRAINT "plan_subscriptions_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX ON "plan_subscriptions" ("user_id");
ALTER TABLE "settings" ADD CONSTRAINT "settings_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX ON "settings" ("user_id");
ALTER TABLE "subscriptions" ADD CONSTRAINT "subscriptions_channel_id_foreign" FOREIGN KEY ("channel_id") REFERENCES "channels" ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX ON "subscriptions" ("channel_id");
ALTER TABLE "subscriptions" ADD CONSTRAINT "subscriptions_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX ON "subscriptions" ("user_id");
ALTER TABLE "video_views" ADD CONSTRAINT "video_views_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX ON "video_views" ("user_id");
ALTER TABLE "video_views" ADD CONSTRAINT "video_views_video_id_foreign" FOREIGN KEY ("video_id") REFERENCES "videos" ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX ON "video_views" ("video_id");
ALTER TABLE "videos" ADD CONSTRAINT "videos_channel_id_foreign" FOREIGN KEY ("channel_id") REFERENCES "channels" ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX ON "videos" ("channel_id");
ALTER TABLE "votes" ADD CONSTRAINT "votes_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX ON "votes" ("user_id");

-- Sequences --
DROP SEQUENCE IF EXISTS cards_id_seq;
CREATE SEQUENCE cards_id_seq;
SELECT setval('cards_id_seq', max(id)) FROM cards;
ALTER TABLE "cards" ALTER COLUMN "id" SET DEFAULT nextval('cards_id_seq');
DROP SEQUENCE IF EXISTS channels_id_seq;
CREATE SEQUENCE channels_id_seq;
SELECT setval('channels_id_seq', max(id)) FROM channels;
ALTER TABLE "channels" ALTER COLUMN "id" SET DEFAULT nextval('channels_id_seq');
DROP SEQUENCE IF EXISTS comments_id_seq;
CREATE SEQUENCE comments_id_seq;
SELECT setval('comments_id_seq', max(id)) FROM comments;
ALTER TABLE "comments" ALTER COLUMN "id" SET DEFAULT nextval('comments_id_seq');
DROP SEQUENCE IF EXISTS failed_jobs_id_seq;
CREATE SEQUENCE failed_jobs_id_seq;
SELECT setval('failed_jobs_id_seq', max(id)) FROM failed_jobs;
ALTER TABLE "failed_jobs" ALTER COLUMN "id" SET DEFAULT nextval('failed_jobs_id_seq');
DROP SEQUENCE IF EXISTS jobs_id_seq;
CREATE SEQUENCE jobs_id_seq;
SELECT setval('jobs_id_seq', max(id)) FROM jobs;
ALTER TABLE "jobs" ALTER COLUMN "id" SET DEFAULT nextval('jobs_id_seq');
DROP SEQUENCE IF EXISTS migrations_id_seq;
CREATE SEQUENCE migrations_id_seq;
SELECT setval('migrations_id_seq', max(id)) FROM migrations;
ALTER TABLE "migrations" ALTER COLUMN "id" SET DEFAULT nextval('migrations_id_seq');
DROP SEQUENCE IF EXISTS plan_subscriptions_id_seq;
CREATE SEQUENCE plan_subscriptions_id_seq;
SELECT setval('plan_subscriptions_id_seq', max(id)) FROM plan_subscriptions;
ALTER TABLE "plan_subscriptions" ALTER COLUMN "id" SET DEFAULT nextval('plan_subscriptions_id_seq');
DROP SEQUENCE IF EXISTS plans_id_seq;
CREATE SEQUENCE plans_id_seq;
SELECT setval('plans_id_seq', max(id)) FROM plans;
ALTER TABLE "plans" ALTER COLUMN "id" SET DEFAULT nextval('plans_id_seq');
DROP SEQUENCE IF EXISTS settings_id_seq;
CREATE SEQUENCE settings_id_seq;
SELECT setval('settings_id_seq', max(id)) FROM settings;
ALTER TABLE "settings" ALTER COLUMN "id" SET DEFAULT nextval('settings_id_seq');
DROP SEQUENCE IF EXISTS subscriptions_id_seq;
CREATE SEQUENCE subscriptions_id_seq;
SELECT setval('subscriptions_id_seq', max(id)) FROM subscriptions;
ALTER TABLE "subscriptions" ALTER COLUMN "id" SET DEFAULT nextval('subscriptions_id_seq');
DROP SEQUENCE IF EXISTS users_id_seq;
CREATE SEQUENCE users_id_seq;
SELECT setval('users_id_seq', max(id)) FROM users;
ALTER TABLE "users" ALTER COLUMN "id" SET DEFAULT nextval('users_id_seq');
DROP SEQUENCE IF EXISTS video_views_id_seq;
CREATE SEQUENCE video_views_id_seq;
SELECT setval('video_views_id_seq', max(id)) FROM video_views;
ALTER TABLE "video_views" ALTER COLUMN "id" SET DEFAULT nextval('video_views_id_seq');
DROP SEQUENCE IF EXISTS videos_id_seq;
CREATE SEQUENCE videos_id_seq;
SELECT setval('videos_id_seq', max(id)) FROM videos;
ALTER TABLE "videos" ALTER COLUMN "id" SET DEFAULT nextval('videos_id_seq');
DROP SEQUENCE IF EXISTS votes_id_seq;
CREATE SEQUENCE votes_id_seq;
SELECT setval('votes_id_seq', max(id)) FROM votes;
ALTER TABLE "votes" ALTER COLUMN "id" SET DEFAULT nextval('votes_id_seq');

-- Drop indexes --
DROP INDEX IF EXISTS "cards_user_id_foreign";
DROP INDEX IF EXISTS "channels_slug_unique";
DROP INDEX IF EXISTS "channels_user_id_foreign";
DROP INDEX IF EXISTS "comments_user_id_foreign";
DROP INDEX IF EXISTS "comments_reply_id_foreign";
DROP INDEX IF EXISTS "jobs_queue_index";
DROP INDEX IF EXISTS "password_resets_email_index";
DROP INDEX IF EXISTS "plan_subscriptions_user_id_foreign";
DROP INDEX IF EXISTS "plans_slug_unique";
DROP INDEX IF EXISTS "settings_user_id_foreign";
DROP INDEX IF EXISTS "subscriptions_user_id_foreign";
DROP INDEX IF EXISTS "subscriptions_channel_id_foreign";
DROP INDEX IF EXISTS "user_activations_token_index";
DROP INDEX IF EXISTS "users_email_unique";
DROP INDEX IF EXISTS "video_views_user_id_foreign";
DROP INDEX IF EXISTS "video_views_video_id_foreign";
DROP INDEX IF EXISTS "videos_channel_id_foreign";
DROP INDEX IF EXISTS "votes_user_id_foreign";
-- END Drop indexes --

-- Indexes --
CREATE INDEX "cards_user_id_foreign" ON cards ("user_id");
CREATE UNIQUE INDEX "channels_slug_unique" ON channels ("slug");
CREATE INDEX "channels_user_id_foreign" ON channels ("user_id");
CREATE INDEX "comments_user_id_foreign" ON comments ("user_id");
CREATE INDEX "comments_reply_id_foreign" ON comments ("reply_id");
CREATE INDEX "jobs_queue_index" ON jobs ("queue");
CREATE INDEX "password_resets_email_index" ON password_resets ("email");
CREATE INDEX "plan_subscriptions_user_id_foreign" ON plan_subscriptions ("user_id");
CREATE UNIQUE INDEX "plans_slug_unique" ON plans ("slug");
CREATE INDEX "settings_user_id_foreign" ON settings ("user_id");
CREATE INDEX "subscriptions_user_id_foreign" ON subscriptions ("user_id");
CREATE INDEX "subscriptions_channel_id_foreign" ON subscriptions ("channel_id");
CREATE INDEX "user_activations_token_index" ON user_activations ("token");
CREATE UNIQUE INDEX "users_email_unique" ON users ("email");
CREATE INDEX "video_views_user_id_foreign" ON video_views ("user_id");
CREATE INDEX "video_views_video_id_foreign" ON video_views ("video_id");
CREATE INDEX "videos_channel_id_foreign" ON videos ("channel_id");
CREATE INDEX "votes_user_id_foreign" ON votes ("user_id");

COMMIT;
